# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GttRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strategy': 'str',
        'trigger_type': 'str',
        'trigger_price': 'float'
    }

    attribute_map = {
        'strategy': 'strategy',
        'trigger_type': 'trigger_type',
        'trigger_price': 'trigger_price'
    }

    def __init__(self, strategy=None, trigger_type=None, trigger_price=None):  # noqa: E501
        """GttRule - a model defined in Swagger"""  # noqa: E501
        self._strategy = None
        self._trigger_type = None
        self._trigger_price = None
        self.discriminator = None
        self.strategy = strategy
        self.trigger_type = trigger_type
        self.trigger_price = trigger_price

    @property
    def strategy(self):
        """Gets the strategy of this GttRule.  # noqa: E501

        Defines the strategy for the GTT order leg: ENTRY - First leg order STOPLOSS - Stop-loss order TARGET - Target order  # noqa: E501

        :return: The strategy of this GttRule.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this GttRule.

        Defines the strategy for the GTT order leg: ENTRY - First leg order STOPLOSS - Stop-loss order TARGET - Target order  # noqa: E501

        :param strategy: The strategy of this GttRule.  # noqa: E501
        :type: str
        """
        if strategy is None:
            raise ValueError("Invalid value for `strategy`, must not be `None`")  # noqa: E501
        allowed_values = ["ENTRY", "STOPLOSS", "TARGET"]  # noqa: E501
        if strategy not in allowed_values:
            raise ValueError(
                "Invalid value for `strategy` ({0}), must be one of {1}"  # noqa: E501
                .format(strategy, allowed_values)
            )

        self._strategy = strategy

    @property
    def trigger_type(self):
        """Gets the trigger_type of this GttRule.  # noqa: E501

        Trigger type for each leg of the order  # noqa: E501

        :return: The trigger_type of this GttRule.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this GttRule.

        Trigger type for each leg of the order  # noqa: E501

        :param trigger_type: The trigger_type of this GttRule.  # noqa: E501
        :type: str
        """
        if trigger_type is None:
            raise ValueError("Invalid value for `trigger_type`, must not be `None`")  # noqa: E501
        allowed_values = ["ABOVE", "BELOW", "IMMEDIATE"]  # noqa: E501
        if trigger_type not in allowed_values:
            raise ValueError(
                "Invalid value for `trigger_type` ({0}), must be one of {1}"  # noqa: E501
                .format(trigger_type, allowed_values)
            )

        self._trigger_type = trigger_type

    @property
    def trigger_price(self):
        """Gets the trigger_price of this GttRule.  # noqa: E501

        Trigger price for the GTT order leg  # noqa: E501

        :return: The trigger_price of this GttRule.  # noqa: E501
        :rtype: float
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this GttRule.

        Trigger price for the GTT order leg  # noqa: E501

        :param trigger_price: The trigger_price of this GttRule.  # noqa: E501
        :type: float
        """
        if trigger_price is None:
            raise ValueError("Invalid value for `trigger_price`, must not be `None`")  # noqa: E501

        self._trigger_price = trigger_price

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GttRule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GttRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
