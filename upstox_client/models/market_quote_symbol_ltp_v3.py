# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketQuoteSymbolLtpV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_price': 'float',
        'instrument_token': 'str',
        'ltq': 'int',
        'volume': 'int',
        'cp': 'float'
    }

    attribute_map = {
        'last_price': 'last_price',
        'instrument_token': 'instrument_token',
        'ltq': 'ltq',
        'volume': 'volume',
        'cp': 'cp'
    }

    def __init__(self, last_price=None, instrument_token=None, ltq=None, volume=None, cp=None):  # noqa: E501
        """MarketQuoteSymbolLtpV3 - a model defined in Swagger"""  # noqa: E501
        self._last_price = None
        self._instrument_token = None
        self._ltq = None
        self._volume = None
        self._cp = None
        self.discriminator = None
        if last_price is not None:
            self.last_price = last_price
        if instrument_token is not None:
            self.instrument_token = instrument_token
        if ltq is not None:
            self.ltq = ltq
        if volume is not None:
            self.volume = volume
        if cp is not None:
            self.cp = cp

    @property
    def last_price(self):
        """Gets the last_price of this MarketQuoteSymbolLtpV3.  # noqa: E501


        :return: The last_price of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :rtype: float
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this MarketQuoteSymbolLtpV3.


        :param last_price: The last_price of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :type: float
        """

        self._last_price = last_price

    @property
    def instrument_token(self):
        """Gets the instrument_token of this MarketQuoteSymbolLtpV3.  # noqa: E501


        :return: The instrument_token of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :rtype: str
        """
        return self._instrument_token

    @instrument_token.setter
    def instrument_token(self, instrument_token):
        """Sets the instrument_token of this MarketQuoteSymbolLtpV3.


        :param instrument_token: The instrument_token of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :type: str
        """

        self._instrument_token = instrument_token

    @property
    def ltq(self):
        """Gets the ltq of this MarketQuoteSymbolLtpV3.  # noqa: E501


        :return: The ltq of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :rtype: int
        """
        return self._ltq

    @ltq.setter
    def ltq(self, ltq):
        """Sets the ltq of this MarketQuoteSymbolLtpV3.


        :param ltq: The ltq of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :type: int
        """

        self._ltq = ltq

    @property
    def volume(self):
        """Gets the volume of this MarketQuoteSymbolLtpV3.  # noqa: E501


        :return: The volume of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this MarketQuoteSymbolLtpV3.


        :param volume: The volume of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def cp(self):
        """Gets the cp of this MarketQuoteSymbolLtpV3.  # noqa: E501


        :return: The cp of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :rtype: float
        """
        return self._cp

    @cp.setter
    def cp(self, cp):
        """Sets the cp of this MarketQuoteSymbolLtpV3.


        :param cp: The cp of this MarketQuoteSymbolLtpV3.  # noqa: E501
        :type: float
        """

        self._cp = cp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketQuoteSymbolLtpV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketQuoteSymbolLtpV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
