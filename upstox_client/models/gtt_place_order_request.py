# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GttPlaceOrderRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'quantity': 'int',
        'product': 'str',
        'rules': 'list[GttRule]',
        'instrument_token': 'str',
        'transaction_type': 'str'
    }

    attribute_map = {
        'type': 'type',
        'quantity': 'quantity',
        'product': 'product',
        'rules': 'rules',
        'instrument_token': 'instrument_token',
        'transaction_type': 'transaction_type'
    }

    def __init__(self, type=None, quantity=None, product=None, rules=None, instrument_token=None, transaction_type=None):  # noqa: E501
        """GttPlaceOrderRequest - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._quantity = None
        self._product = None
        self._rules = None
        self._instrument_token = None
        self._transaction_type = None
        self.discriminator = None
        self.type = type
        self.quantity = quantity
        self.product = product
        self.rules = rules
        self.instrument_token = instrument_token
        self.transaction_type = transaction_type

    @property
    def type(self):
        """Gets the type of this GttPlaceOrderRequest.  # noqa: E501

        Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order  # noqa: E501

        :return: The type of this GttPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GttPlaceOrderRequest.

        Type of GTT order. It can be one of the following: SINGLE refers to a single-leg GTT order MULTIPLE refers to a multi-leg GTT order  # noqa: E501

        :param type: The type of this GttPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["SINGLE", "MULTIPLE"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def quantity(self):
        """Gets the quantity of this GttPlaceOrderRequest.  # noqa: E501

        Quantity with which the order is to be placed  # noqa: E501

        :return: The quantity of this GttPlaceOrderRequest.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GttPlaceOrderRequest.

        Quantity with which the order is to be placed  # noqa: E501

        :param quantity: The quantity of this GttPlaceOrderRequest.  # noqa: E501
        :type: int
        """
        if quantity is None:
            raise ValueError("Invalid value for `quantity`, must not be `None`")  # noqa: E501

        self._quantity = quantity

    @property
    def product(self):
        """Gets the product of this GttPlaceOrderRequest.  # noqa: E501

        Signifies if the order was either Intraday, Delivery, CO or OCO  # noqa: E501

        :return: The product of this GttPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GttPlaceOrderRequest.

        Signifies if the order was either Intraday, Delivery, CO or OCO  # noqa: E501

        :param product: The product of this GttPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if product is None:
            raise ValueError("Invalid value for `product`, must not be `None`")  # noqa: E501
        allowed_values = ["I", "D"]  # noqa: E501
        if product not in allowed_values:
            raise ValueError(
                "Invalid value for `product` ({0}), must be one of {1}"  # noqa: E501
                .format(product, allowed_values)
            )

        self._product = product

    @property
    def rules(self):
        """Gets the rules of this GttPlaceOrderRequest.  # noqa: E501

        List of rules defining the conditions for each leg in the GTT order  # noqa: E501

        :return: The rules of this GttPlaceOrderRequest.  # noqa: E501
        :rtype: list[GttRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this GttPlaceOrderRequest.

        List of rules defining the conditions for each leg in the GTT order  # noqa: E501

        :param rules: The rules of this GttPlaceOrderRequest.  # noqa: E501
        :type: list[GttRule]
        """
        if rules is None:
            raise ValueError("Invalid value for `rules`, must not be `None`")  # noqa: E501

        self._rules = rules

    @property
    def instrument_token(self):
        """Gets the instrument_token of this GttPlaceOrderRequest.  # noqa: E501

        Key of the instrument  # noqa: E501

        :return: The instrument_token of this GttPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._instrument_token

    @instrument_token.setter
    def instrument_token(self, instrument_token):
        """Sets the instrument_token of this GttPlaceOrderRequest.

        Key of the instrument  # noqa: E501

        :param instrument_token: The instrument_token of this GttPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if instrument_token is None:
            raise ValueError("Invalid value for `instrument_token`, must not be `None`")  # noqa: E501

        self._instrument_token = instrument_token

    @property
    def transaction_type(self):
        """Gets the transaction_type of this GttPlaceOrderRequest.  # noqa: E501

        Indicates whether its a buy or sell order  # noqa: E501

        :return: The transaction_type of this GttPlaceOrderRequest.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this GttPlaceOrderRequest.

        Indicates whether its a buy or sell order  # noqa: E501

        :param transaction_type: The transaction_type of this GttPlaceOrderRequest.  # noqa: E501
        :type: str
        """
        if transaction_type is None:
            raise ValueError("Invalid value for `transaction_type`, must not be `None`")  # noqa: E501
        allowed_values = ["BUY", "SELL"]  # noqa: E501
        if transaction_type not in allowed_values:
            raise ValueError(
                "Invalid value for `transaction_type` ({0}), must be one of {1}"  # noqa: E501
                .format(transaction_type, allowed_values)
            )

        self._transaction_type = transaction_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GttPlaceOrderRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GttPlaceOrderRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
