# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GttOrderDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'exchange': 'str',
        'quantity': 'int',
        'product': 'str',
        'rules': 'list[Rule]',
        'trading_symbol': 'str',
        'instrument_token': 'str',
        'gtt_order_id': 'str',
        'expires_at': 'int',
        'created_at': 'int'
    }

    attribute_map = {
        'type': 'type',
        'exchange': 'exchange',
        'quantity': 'quantity',
        'product': 'product',
        'rules': 'rules',
        'trading_symbol': 'trading_symbol',
        'instrument_token': 'instrument_token',
        'gtt_order_id': 'gtt_order_id',
        'expires_at': 'expires_at',
        'created_at': 'created_at'
    }

    def __init__(self, type=None, exchange=None, quantity=None, product=None, rules=None, trading_symbol=None, instrument_token=None, gtt_order_id=None, expires_at=None, created_at=None):  # noqa: E501
        """GttOrderDetails - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._exchange = None
        self._quantity = None
        self._product = None
        self._rules = None
        self._trading_symbol = None
        self._instrument_token = None
        self._gtt_order_id = None
        self._expires_at = None
        self._created_at = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if exchange is not None:
            self.exchange = exchange
        if quantity is not None:
            self.quantity = quantity
        if product is not None:
            self.product = product
        if rules is not None:
            self.rules = rules
        if trading_symbol is not None:
            self.trading_symbol = trading_symbol
        if instrument_token is not None:
            self.instrument_token = instrument_token
        if gtt_order_id is not None:
            self.gtt_order_id = gtt_order_id
        if expires_at is not None:
            self.expires_at = expires_at
        if created_at is not None:
            self.created_at = created_at

    @property
    def type(self):
        """Gets the type of this GttOrderDetails.  # noqa: E501


        :return: The type of this GttOrderDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GttOrderDetails.


        :param type: The type of this GttOrderDetails.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def exchange(self):
        """Gets the exchange of this GttOrderDetails.  # noqa: E501


        :return: The exchange of this GttOrderDetails.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this GttOrderDetails.


        :param exchange: The exchange of this GttOrderDetails.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def quantity(self):
        """Gets the quantity of this GttOrderDetails.  # noqa: E501


        :return: The quantity of this GttOrderDetails.  # noqa: E501
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this GttOrderDetails.


        :param quantity: The quantity of this GttOrderDetails.  # noqa: E501
        :type: int
        """

        self._quantity = quantity

    @property
    def product(self):
        """Gets the product of this GttOrderDetails.  # noqa: E501


        :return: The product of this GttOrderDetails.  # noqa: E501
        :rtype: str
        """
        return self._product

    @product.setter
    def product(self, product):
        """Sets the product of this GttOrderDetails.


        :param product: The product of this GttOrderDetails.  # noqa: E501
        :type: str
        """

        self._product = product

    @property
    def rules(self):
        """Gets the rules of this GttOrderDetails.  # noqa: E501


        :return: The rules of this GttOrderDetails.  # noqa: E501
        :rtype: list[Rule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this GttOrderDetails.


        :param rules: The rules of this GttOrderDetails.  # noqa: E501
        :type: list[Rule]
        """

        self._rules = rules

    @property
    def trading_symbol(self):
        """Gets the trading_symbol of this GttOrderDetails.  # noqa: E501


        :return: The trading_symbol of this GttOrderDetails.  # noqa: E501
        :rtype: str
        """
        return self._trading_symbol

    @trading_symbol.setter
    def trading_symbol(self, trading_symbol):
        """Sets the trading_symbol of this GttOrderDetails.


        :param trading_symbol: The trading_symbol of this GttOrderDetails.  # noqa: E501
        :type: str
        """

        self._trading_symbol = trading_symbol

    @property
    def instrument_token(self):
        """Gets the instrument_token of this GttOrderDetails.  # noqa: E501


        :return: The instrument_token of this GttOrderDetails.  # noqa: E501
        :rtype: str
        """
        return self._instrument_token

    @instrument_token.setter
    def instrument_token(self, instrument_token):
        """Sets the instrument_token of this GttOrderDetails.


        :param instrument_token: The instrument_token of this GttOrderDetails.  # noqa: E501
        :type: str
        """

        self._instrument_token = instrument_token

    @property
    def gtt_order_id(self):
        """Gets the gtt_order_id of this GttOrderDetails.  # noqa: E501


        :return: The gtt_order_id of this GttOrderDetails.  # noqa: E501
        :rtype: str
        """
        return self._gtt_order_id

    @gtt_order_id.setter
    def gtt_order_id(self, gtt_order_id):
        """Sets the gtt_order_id of this GttOrderDetails.


        :param gtt_order_id: The gtt_order_id of this GttOrderDetails.  # noqa: E501
        :type: str
        """

        self._gtt_order_id = gtt_order_id

    @property
    def expires_at(self):
        """Gets the expires_at of this GttOrderDetails.  # noqa: E501


        :return: The expires_at of this GttOrderDetails.  # noqa: E501
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this GttOrderDetails.


        :param expires_at: The expires_at of this GttOrderDetails.  # noqa: E501
        :type: int
        """

        self._expires_at = expires_at

    @property
    def created_at(self):
        """Gets the created_at of this GttOrderDetails.  # noqa: E501


        :return: The created_at of this GttOrderDetails.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this GttOrderDetails.


        :param created_at: The created_at of this GttOrderDetails.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GttOrderDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GttOrderDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
