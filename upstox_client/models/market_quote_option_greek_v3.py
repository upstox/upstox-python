# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MarketQuoteOptionGreekV3(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_price': 'float',
        'instrument_token': 'str',
        'ltq': 'int',
        'volume': 'int',
        'cp': 'float',
        'iv': 'float',
        'vega': 'float',
        'gamma': 'float',
        'theta': 'float',
        'delta': 'float',
        'oi': 'float'
    }

    attribute_map = {
        'last_price': 'last_price',
        'instrument_token': 'instrument_token',
        'ltq': 'ltq',
        'volume': 'volume',
        'cp': 'cp',
        'iv': 'iv',
        'vega': 'vega',
        'gamma': 'gamma',
        'theta': 'theta',
        'delta': 'delta',
        'oi': 'oi'
    }

    def __init__(self, last_price=None, instrument_token=None, ltq=None, volume=None, cp=None, iv=None, vega=None, gamma=None, theta=None, delta=None, oi=None):  # noqa: E501
        """MarketQuoteOptionGreekV3 - a model defined in Swagger"""  # noqa: E501
        self._last_price = None
        self._instrument_token = None
        self._ltq = None
        self._volume = None
        self._cp = None
        self._iv = None
        self._vega = None
        self._gamma = None
        self._theta = None
        self._delta = None
        self._oi = None
        self.discriminator = None
        if last_price is not None:
            self.last_price = last_price
        if instrument_token is not None:
            self.instrument_token = instrument_token
        if ltq is not None:
            self.ltq = ltq
        if volume is not None:
            self.volume = volume
        if cp is not None:
            self.cp = cp
        if iv is not None:
            self.iv = iv
        if vega is not None:
            self.vega = vega
        if gamma is not None:
            self.gamma = gamma
        if theta is not None:
            self.theta = theta
        if delta is not None:
            self.delta = delta
        if oi is not None:
            self.oi = oi

    @property
    def last_price(self):
        """Gets the last_price of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The last_price of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._last_price

    @last_price.setter
    def last_price(self, last_price):
        """Sets the last_price of this MarketQuoteOptionGreekV3.


        :param last_price: The last_price of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._last_price = last_price

    @property
    def instrument_token(self):
        """Gets the instrument_token of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The instrument_token of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: str
        """
        return self._instrument_token

    @instrument_token.setter
    def instrument_token(self, instrument_token):
        """Sets the instrument_token of this MarketQuoteOptionGreekV3.


        :param instrument_token: The instrument_token of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: str
        """

        self._instrument_token = instrument_token

    @property
    def ltq(self):
        """Gets the ltq of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The ltq of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: int
        """
        return self._ltq

    @ltq.setter
    def ltq(self, ltq):
        """Sets the ltq of this MarketQuoteOptionGreekV3.


        :param ltq: The ltq of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: int
        """

        self._ltq = ltq

    @property
    def volume(self):
        """Gets the volume of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The volume of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: int
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this MarketQuoteOptionGreekV3.


        :param volume: The volume of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: int
        """

        self._volume = volume

    @property
    def cp(self):
        """Gets the cp of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The cp of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._cp

    @cp.setter
    def cp(self, cp):
        """Sets the cp of this MarketQuoteOptionGreekV3.


        :param cp: The cp of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._cp = cp

    @property
    def iv(self):
        """Gets the iv of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The iv of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._iv

    @iv.setter
    def iv(self, iv):
        """Sets the iv of this MarketQuoteOptionGreekV3.


        :param iv: The iv of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._iv = iv

    @property
    def vega(self):
        """Gets the vega of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The vega of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._vega

    @vega.setter
    def vega(self, vega):
        """Sets the vega of this MarketQuoteOptionGreekV3.


        :param vega: The vega of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._vega = vega

    @property
    def gamma(self):
        """Gets the gamma of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The gamma of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._gamma

    @gamma.setter
    def gamma(self, gamma):
        """Sets the gamma of this MarketQuoteOptionGreekV3.


        :param gamma: The gamma of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._gamma = gamma

    @property
    def theta(self):
        """Gets the theta of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The theta of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._theta

    @theta.setter
    def theta(self, theta):
        """Sets the theta of this MarketQuoteOptionGreekV3.


        :param theta: The theta of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._theta = theta

    @property
    def delta(self):
        """Gets the delta of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The delta of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this MarketQuoteOptionGreekV3.


        :param delta: The delta of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._delta = delta

    @property
    def oi(self):
        """Gets the oi of this MarketQuoteOptionGreekV3.  # noqa: E501


        :return: The oi of this MarketQuoteOptionGreekV3.  # noqa: E501
        :rtype: float
        """
        return self._oi

    @oi.setter
    def oi(self, oi):
        """Sets the oi of this MarketQuoteOptionGreekV3.


        :param oi: The oi of this MarketQuoteOptionGreekV3.  # noqa: E501
        :type: float
        """

        self._oi = oi

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MarketQuoteOptionGreekV3, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MarketQuoteOptionGreekV3):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
