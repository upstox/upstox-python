# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExpiredFutureData(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'segment': 'str',
        'exchange': 'str',
        'expiry': 'str',
        'instrument_key': 'str',
        'exchange_token': 'str',
        'trading_symbol': 'str',
        'tick_size': 'float',
        'lot_size': 'int',
        'instrument_type': 'str',
        'freeze_quantity': 'float',
        'underlying_key': 'str',
        'underlying_type': 'str',
        'underlying_symbol': 'str',
        'minimum_lot': 'int'
    }

    attribute_map = {
        'name': 'name',
        'segment': 'segment',
        'exchange': 'exchange',
        'expiry': 'expiry',
        'instrument_key': 'instrument_key',
        'exchange_token': 'exchange_token',
        'trading_symbol': 'trading_symbol',
        'tick_size': 'tick_size',
        'lot_size': 'lot_size',
        'instrument_type': 'instrument_type',
        'freeze_quantity': 'freeze_quantity',
        'underlying_key': 'underlying_key',
        'underlying_type': 'underlying_type',
        'underlying_symbol': 'underlying_symbol',
        'minimum_lot': 'minimum_lot'
    }

    def __init__(self, name=None, segment=None, exchange=None, expiry=None, instrument_key=None, exchange_token=None, trading_symbol=None, tick_size=None, lot_size=None, instrument_type=None, freeze_quantity=None, underlying_key=None, underlying_type=None, underlying_symbol=None, minimum_lot=None):  # noqa: E501
        """ExpiredFutureData - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._segment = None
        self._exchange = None
        self._expiry = None
        self._instrument_key = None
        self._exchange_token = None
        self._trading_symbol = None
        self._tick_size = None
        self._lot_size = None
        self._instrument_type = None
        self._freeze_quantity = None
        self._underlying_key = None
        self._underlying_type = None
        self._underlying_symbol = None
        self._minimum_lot = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if segment is not None:
            self.segment = segment
        if exchange is not None:
            self.exchange = exchange
        if expiry is not None:
            self.expiry = expiry
        if instrument_key is not None:
            self.instrument_key = instrument_key
        if exchange_token is not None:
            self.exchange_token = exchange_token
        if trading_symbol is not None:
            self.trading_symbol = trading_symbol
        if tick_size is not None:
            self.tick_size = tick_size
        if lot_size is not None:
            self.lot_size = lot_size
        if instrument_type is not None:
            self.instrument_type = instrument_type
        if freeze_quantity is not None:
            self.freeze_quantity = freeze_quantity
        if underlying_key is not None:
            self.underlying_key = underlying_key
        if underlying_type is not None:
            self.underlying_type = underlying_type
        if underlying_symbol is not None:
            self.underlying_symbol = underlying_symbol
        if minimum_lot is not None:
            self.minimum_lot = minimum_lot

    @property
    def name(self):
        """Gets the name of this ExpiredFutureData.  # noqa: E501

        Name of the instrument  # noqa: E501

        :return: The name of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExpiredFutureData.

        Name of the instrument  # noqa: E501

        :param name: The name of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def segment(self):
        """Gets the segment of this ExpiredFutureData.  # noqa: E501

        Segment of the instrument  # noqa: E501

        :return: The segment of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._segment

    @segment.setter
    def segment(self, segment):
        """Sets the segment of this ExpiredFutureData.

        Segment of the instrument  # noqa: E501

        :param segment: The segment of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._segment = segment

    @property
    def exchange(self):
        """Gets the exchange of this ExpiredFutureData.  # noqa: E501

        Exchange of the instrument  # noqa: E501

        :return: The exchange of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._exchange

    @exchange.setter
    def exchange(self, exchange):
        """Sets the exchange of this ExpiredFutureData.

        Exchange of the instrument  # noqa: E501

        :param exchange: The exchange of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._exchange = exchange

    @property
    def expiry(self):
        """Gets the expiry of this ExpiredFutureData.  # noqa: E501

        Expiry date of the instrument  # noqa: E501

        :return: The expiry of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._expiry

    @expiry.setter
    def expiry(self, expiry):
        """Sets the expiry of this ExpiredFutureData.

        Expiry date of the instrument  # noqa: E501

        :param expiry: The expiry of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._expiry = expiry

    @property
    def instrument_key(self):
        """Gets the instrument_key of this ExpiredFutureData.  # noqa: E501

        Unique key identifying the instrument  # noqa: E501

        :return: The instrument_key of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._instrument_key

    @instrument_key.setter
    def instrument_key(self, instrument_key):
        """Sets the instrument_key of this ExpiredFutureData.

        Unique key identifying the instrument  # noqa: E501

        :param instrument_key: The instrument_key of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._instrument_key = instrument_key

    @property
    def exchange_token(self):
        """Gets the exchange_token of this ExpiredFutureData.  # noqa: E501

        Token assigned by the exchange  # noqa: E501

        :return: The exchange_token of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._exchange_token

    @exchange_token.setter
    def exchange_token(self, exchange_token):
        """Sets the exchange_token of this ExpiredFutureData.

        Token assigned by the exchange  # noqa: E501

        :param exchange_token: The exchange_token of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._exchange_token = exchange_token

    @property
    def trading_symbol(self):
        """Gets the trading_symbol of this ExpiredFutureData.  # noqa: E501

        Symbol used for trading  # noqa: E501

        :return: The trading_symbol of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._trading_symbol

    @trading_symbol.setter
    def trading_symbol(self, trading_symbol):
        """Sets the trading_symbol of this ExpiredFutureData.

        Symbol used for trading  # noqa: E501

        :param trading_symbol: The trading_symbol of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._trading_symbol = trading_symbol

    @property
    def tick_size(self):
        """Gets the tick_size of this ExpiredFutureData.  # noqa: E501

        Minimum price movement  # noqa: E501

        :return: The tick_size of this ExpiredFutureData.  # noqa: E501
        :rtype: float
        """
        return self._tick_size

    @tick_size.setter
    def tick_size(self, tick_size):
        """Sets the tick_size of this ExpiredFutureData.

        Minimum price movement  # noqa: E501

        :param tick_size: The tick_size of this ExpiredFutureData.  # noqa: E501
        :type: float
        """

        self._tick_size = tick_size

    @property
    def lot_size(self):
        """Gets the lot_size of this ExpiredFutureData.  # noqa: E501

        Number of units per lot  # noqa: E501

        :return: The lot_size of this ExpiredFutureData.  # noqa: E501
        :rtype: int
        """
        return self._lot_size

    @lot_size.setter
    def lot_size(self, lot_size):
        """Sets the lot_size of this ExpiredFutureData.

        Number of units per lot  # noqa: E501

        :param lot_size: The lot_size of this ExpiredFutureData.  # noqa: E501
        :type: int
        """

        self._lot_size = lot_size

    @property
    def instrument_type(self):
        """Gets the instrument_type of this ExpiredFutureData.  # noqa: E501

        Type of the instrument  # noqa: E501

        :return: The instrument_type of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._instrument_type

    @instrument_type.setter
    def instrument_type(self, instrument_type):
        """Sets the instrument_type of this ExpiredFutureData.

        Type of the instrument  # noqa: E501

        :param instrument_type: The instrument_type of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._instrument_type = instrument_type

    @property
    def freeze_quantity(self):
        """Gets the freeze_quantity of this ExpiredFutureData.  # noqa: E501

        Maximum allowed quantity  # noqa: E501

        :return: The freeze_quantity of this ExpiredFutureData.  # noqa: E501
        :rtype: float
        """
        return self._freeze_quantity

    @freeze_quantity.setter
    def freeze_quantity(self, freeze_quantity):
        """Sets the freeze_quantity of this ExpiredFutureData.

        Maximum allowed quantity  # noqa: E501

        :param freeze_quantity: The freeze_quantity of this ExpiredFutureData.  # noqa: E501
        :type: float
        """

        self._freeze_quantity = freeze_quantity

    @property
    def underlying_key(self):
        """Gets the underlying_key of this ExpiredFutureData.  # noqa: E501

        Key of the underlying asset  # noqa: E501

        :return: The underlying_key of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._underlying_key

    @underlying_key.setter
    def underlying_key(self, underlying_key):
        """Sets the underlying_key of this ExpiredFutureData.

        Key of the underlying asset  # noqa: E501

        :param underlying_key: The underlying_key of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._underlying_key = underlying_key

    @property
    def underlying_type(self):
        """Gets the underlying_type of this ExpiredFutureData.  # noqa: E501

        Type of the underlying asset  # noqa: E501

        :return: The underlying_type of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._underlying_type

    @underlying_type.setter
    def underlying_type(self, underlying_type):
        """Sets the underlying_type of this ExpiredFutureData.

        Type of the underlying asset  # noqa: E501

        :param underlying_type: The underlying_type of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._underlying_type = underlying_type

    @property
    def underlying_symbol(self):
        """Gets the underlying_symbol of this ExpiredFutureData.  # noqa: E501

        Symbol of the underlying asset  # noqa: E501

        :return: The underlying_symbol of this ExpiredFutureData.  # noqa: E501
        :rtype: str
        """
        return self._underlying_symbol

    @underlying_symbol.setter
    def underlying_symbol(self, underlying_symbol):
        """Sets the underlying_symbol of this ExpiredFutureData.

        Symbol of the underlying asset  # noqa: E501

        :param underlying_symbol: The underlying_symbol of this ExpiredFutureData.  # noqa: E501
        :type: str
        """

        self._underlying_symbol = underlying_symbol

    @property
    def minimum_lot(self):
        """Gets the minimum_lot of this ExpiredFutureData.  # noqa: E501

        Minimum lot size  # noqa: E501

        :return: The minimum_lot of this ExpiredFutureData.  # noqa: E501
        :rtype: int
        """
        return self._minimum_lot

    @minimum_lot.setter
    def minimum_lot(self, minimum_lot):
        """Sets the minimum_lot of this ExpiredFutureData.

        Minimum lot size  # noqa: E501

        :param minimum_lot: The minimum_lot of this ExpiredFutureData.  # noqa: E501
        :type: int
        """

        self._minimum_lot = minimum_lot

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExpiredFutureData, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExpiredFutureData):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
