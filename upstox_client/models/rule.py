# coding: utf-8

"""
    OpenAPI definition

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Rule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'strategy': 'str',
        'status': 'str',
        'trigger_type': 'str',
        'trigger_price': 'float',
        'transaction_type': 'str',
        'order_id': 'str'
    }

    attribute_map = {
        'strategy': 'strategy',
        'status': 'status',
        'trigger_type': 'trigger_type',
        'trigger_price': 'trigger_price',
        'transaction_type': 'transaction_type',
        'order_id': 'order_id'
    }

    def __init__(self, strategy=None, status=None, trigger_type=None, trigger_price=None, transaction_type=None, order_id=None):  # noqa: E501
        """Rule - a model defined in Swagger"""  # noqa: E501
        self._strategy = None
        self._status = None
        self._trigger_type = None
        self._trigger_price = None
        self._transaction_type = None
        self._order_id = None
        self.discriminator = None
        if strategy is not None:
            self.strategy = strategy
        if status is not None:
            self.status = status
        if trigger_type is not None:
            self.trigger_type = trigger_type
        if trigger_price is not None:
            self.trigger_price = trigger_price
        if transaction_type is not None:
            self.transaction_type = transaction_type
        if order_id is not None:
            self.order_id = order_id

    @property
    def strategy(self):
        """Gets the strategy of this Rule.  # noqa: E501


        :return: The strategy of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._strategy

    @strategy.setter
    def strategy(self, strategy):
        """Sets the strategy of this Rule.


        :param strategy: The strategy of this Rule.  # noqa: E501
        :type: str
        """

        self._strategy = strategy

    @property
    def status(self):
        """Gets the status of this Rule.  # noqa: E501


        :return: The status of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Rule.


        :param status: The status of this Rule.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def trigger_type(self):
        """Gets the trigger_type of this Rule.  # noqa: E501


        :return: The trigger_type of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._trigger_type

    @trigger_type.setter
    def trigger_type(self, trigger_type):
        """Sets the trigger_type of this Rule.


        :param trigger_type: The trigger_type of this Rule.  # noqa: E501
        :type: str
        """

        self._trigger_type = trigger_type

    @property
    def trigger_price(self):
        """Gets the trigger_price of this Rule.  # noqa: E501


        :return: The trigger_price of this Rule.  # noqa: E501
        :rtype: float
        """
        return self._trigger_price

    @trigger_price.setter
    def trigger_price(self, trigger_price):
        """Sets the trigger_price of this Rule.


        :param trigger_price: The trigger_price of this Rule.  # noqa: E501
        :type: float
        """

        self._trigger_price = trigger_price

    @property
    def transaction_type(self):
        """Gets the transaction_type of this Rule.  # noqa: E501


        :return: The transaction_type of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._transaction_type

    @transaction_type.setter
    def transaction_type(self, transaction_type):
        """Sets the transaction_type of this Rule.


        :param transaction_type: The transaction_type of this Rule.  # noqa: E501
        :type: str
        """

        self._transaction_type = transaction_type

    @property
    def order_id(self):
        """Gets the order_id of this Rule.  # noqa: E501


        :return: The order_id of this Rule.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this Rule.


        :param order_id: The order_id of this Rule.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
